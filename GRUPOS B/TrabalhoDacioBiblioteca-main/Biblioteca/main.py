import unittest
import time
import os
from emprestimo import LoanController
from usuario_mock import UserStoreMock
from livro_mock import BookStoreMock

RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
RESET = "\033[0m"
BOLD = "\033[1m"

def run_tests():
    loader = unittest.TestLoader()
    suite = loader.discover(start_dir=".", pattern="test_*.py")
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    return result

def show_tdd_cycle():
    os.system('cls' if os.name == 'nt' else 'clear')
    print(f"{BOLD}üöÄ Demo TDD - M√≥dulo Empr√©stimo e Devolu√ß√£o\n{RESET}")
    time.sleep(1)
    print(f"{YELLOW}Etapa 1 - RED: execute testes antes de implementar mudan√ßas{RESET}\n")
    time.sleep(1)
    print(f"{BOLD}Executando testes...\n{RESET}")
    result = run_tests()
    if not result.wasSuccessful():
        print(f"\n{RED}‚ùå Alguns testes falharam (como esperado no RED).{RESET}")
    else:
        print(f"\n{YELLOW}‚ö†Ô∏è Todos os testes passaram ‚Äî verifique se voc√™ j√° implementou as mudan√ßas.{RESET}")
    input("\nPressione ENTER para reexecutar (ap√≥s mudan√ßas simuladas) ...")
    os.system('cls' if os.name == 'nt' else 'clear')
    print(f"{YELLOW}Etapa 2 - GREEN: reexecute ap√≥s implementa√ß√£o{RESET}\n")
    result = run_tests()
    if result.wasSuccessful():
        print(f"\n{GREEN}‚úÖ Todos os testes passaram (GREEN).{RESET}")
    else:
        print(f"\n{RED}‚ùå Ainda h√° falhas.{RESET}")
        return
    time.sleep(1)
    print(f"\n{YELLOW}Etapa 3 - REFACTOR: com testes passando, refatore com seguran√ßa.{RESET}")
    print(f"{BOLD}{GREEN}\nFIM DA DEMONSTRA√á√ÉO TDD{RESET}")

if __name__ == "__main__":
    show_tdd_cycle()